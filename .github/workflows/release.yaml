name: release

on:
    workflow_dispatch:
        inputs:
            tag_name:
                description: 'The release tag'
                required: true

jobs:
    build-linux:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Rust
                uses: actions-rs/toolchain@v1
                with:
                    toolchain: stable
                    target: x86_64-unknown-linux-gnu

            -   name: Install dependencies
                run: rustup target add x86_64-unknown-linux-gnu

            -   name: Build
                run: cargo build --release --target x86_64-unknown-linux-gnu

            -   name: Archive binary
                uses: actions/upload-artifact@v2
                with:
                    name: rdt-linux-${{ github.event.inputs.tag_name }}
                    path: "/home/runner/work/rusty_dev_tool/rusty_dev_tool"

    build-macos-amd64:
        runs-on: macos-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Rust
                uses: actions-rs/toolchain@v1
                with:
                    toolchain: stable
                    target: x86_64-apple-darwin

            -   name: Install dependencies
                run: rustup target add x86_64-apple-darwin

            -   name: Build
                run: cargo build --release --target x86_64-apple-darwin

            -   name: Archive binary
                uses: actions/upload-artifact@v2
                with:
                    name: rdt-macos-amd64-${{ github.event.inputs.tag_name }}
                    path: "/Users/runner/work/rusty_dev_tool/rusty_dev_tool"

    build-macos-arm64:
        runs-on: macos-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Rust
                uses: actions-rs/toolchain@v1
                with:
                    toolchain: stable
                    target: aarch64-apple-darwin

            -   name: Install dependencies
                run: rustup target add aarch64-apple-darwin

            -   name: Build
                run: cargo build --release --target aarch64-apple-darwin

            -   name: Archive binary
                uses: actions/upload-artifact@v2
                with:
                    name: rdt-macos-arm64-${{ github.event.inputs.tag_name }}
                    path: "/Users/runner/work/rusty_dev_tool/rusty_dev_tool"

    # Windows is not yet tested and supported (actually we know it cannot work atm)
    build-windows:
        runs-on: windows-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Rust
                uses: actions-rs/toolchain@v1
                with:
                    toolchain: stable
                    target: x86_64-pc-windows-msvc

            -   name: Install dependencies
                run: rustup target add x86_64-pc-windows-msvc

            -   name: Build
                run: cargo build --release --target x86_64-pc-windows-msvc

            -   name: Archive binary
                uses: actions/upload-artifact@v2
                with:
                    name: rdt-windows-${{ github.event.inputs.tag_name }}.exe
                    path: "D:\\a\\rusty_dev_tool\\rusty_dev_tool"

    release:
        needs: [ build-linux, build-macos-amd64, build-macos-arm64, build-windows ]
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Download Linux binary
                uses: actions/download-artifact@v2
                with:
                    name: rdt-linux-${{ github.event.inputs.tag_name }}
                    path: ./binaries/linux

            -   name: Download macOS AMD64 binary
                uses: actions/download-artifact@v2
                with:
                    name: rdt-macos-amd64-${{ github.event.inputs.tag_name }}
                    path: ./binaries/macos/amd64

            -   name: Download macOS ARM64 binary
                uses: actions/download-artifact@v2
                with:
                    name: rdt-macos-arm64-${{ github.event.inputs.tag_name }}
                    path: ./binaries/macos/arm64

            -   name: Download Windows binary
                uses: actions/download-artifact@v2
                with:
                    name: rdt-windows-${{ github.event.inputs.tag_name }}.exe
                    path: ./binaries/windows

            -   name: Check content
                run: ls -la ./binaries && ls -la ./binaries/linux && ls -la ./binaries/macos && ls -la ./binaries/windows && ls -lah && ls -la ./binaries/linux/target && ls -la ./binaries/linux/target/release

            -   name: Upload Linux binary
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                     https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.tag_name }} \
                     | jq -r .id)
                    curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                     -H "Content-Type: application/octet-stream" \
                     --data-binary @./binaries/linux/rdt-linux-${{ github.event.inputs.tag_name }} \
                     "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=rdt-linux-${{ github.event.inputs.tag_name }}"

            -   name: Upload macOS AMD64 binary
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                      https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.tag_name }} \
                      | jq -r .id)
                    curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                      -H "Content-Type: application/octet-stream" \
                      --data-binary @./binaries/macos/amd64/rdt-macos-amd64-${{ github.event.inputs.tag_name }} \
                      "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=rdt-macos-amd64-${{ github.event.inputs.tag_name }}"

            -   name: Upload macOS ARM64 binary
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                      https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.tag_name }} \
                      | jq -r .id)
                    curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                      -H "Content-Type: application/octet-stream" \
                      --data-binary @./binaries/macos/arm64/rdt-macos-arm64-${{ github.event.inputs.tag_name }} \
                      "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=rdt-macos-arm64-${{ github.event.inputs.tag_name }}"

            -   name: Upload Windows binary
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                      https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.tag_name }} \
                      | jq -r .id)
                    curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                      -H "Content-Type: application/octet-stream" \
                      --data-binary @./binaries/windows/rdt-windows-${{ github.event.inputs.tag_name }}.exe \
                      "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=rdt-windows-${{ github.event.inputs.tag_name }}.exe"
                    
                    # We don't want those zips in our releases - only the binaries
            -   name: Delete source code archives
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                      https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.tag_name }} \
                      | jq -r .id)
                    
                    asset_ids=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                      https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets \
                      | jq -r '.[] | select(.name | endswith(".zip") or endswith(".tar.gz")) | .id')
                    
                    for asset_id in $asset_ids; do
                      curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                        https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id
                    done